user www-data;

# Change process pid number
# pid /var/run/new_nginx.pid;

# one worker for each CPU core
worker_processes auto;

load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

events {
	# number of request each worker can handle = $ ulimit -n
	worker_connections 1024;
}

http {

	include mime.types;

	# Buffer size for POST submissions
	client_body_buffer_size 10K;
	client_max_body_size 8m;

	# Buffer size for Headers
	client_header_buffer_size 1k;

	# Max time to receive client headers/body
	# too long
	client_body_timeout 12; 
	client_header_timeout 12;

	# Max time to keep a connection open for
	# couple of seconds better
	keepalive_timeout 15;

	# Max time for the client accept/receive a response
	send_timeout 10;

	# Skip buffering for static files, write at the same time
	# important increase of performace increase
	sendfile on;

	# Optimise sendfile packets
	# same important increase
	tcp_nopush on;

	server {

	 listen 80;
	 server_name 192.168.56.101;
	 
	
	 root /home/manuel/sites/demo;

	 index index.php index.html;

	 location / {
		try_files $uri $uri/ =404;
	 }


	 location ~\.php$ {
	 	#Pass php request to the php-fpm service (fastcgi)
		include fastcgi.conf;
		fastcgi_pass unix:/run/php/php7.1-fpm.sock;
	 }
	 set $weekend 'No';

	 # Check if weekend
	 if ( $date_local ~ 'Saturday|Sunday' ){
		set $weekend 'Yes';
	 }

	 # Intercept all requests and serves first if is available
	 try_files $uri index.html /friendly_404;

	 location /friendly_404 {
		access_log off;
		return 404 "Sorry, that file could not be found.";
	 }

	 rewrite ^/user/(\w+) /catch/$1;
	 
	 location /catch {
		return 200 "hello user";
	 }

	 # Chech statis API key
#	 if ( $arg_apikey != 1234 ) {
#		return 401 "Incorrect API key";
#	 }
	
	 location /logo {
		return 307 /thumb.png;
	 }

	 location /inspect {
		return 200 "$weekend";
		#return 200 "Name: $arg_Name";
		# return 200 "$host\n$uri\n$args";
	 }

	 #PREFIX MATCH
	 location /greet {
		return 200 'Hello fron NGINX "/greet" location PREFIX MATCH';
	 }
	
	 #REGEX MATCH SENSITIVE
	 location ~ /greet[0-9] {
		return 200 'Hello from NGINX "/greet" location REGEX MATCH SENSITIVE';
	 }

	 #REGEX MATCH INSENSITIVE
	 location ~* /greet[0-9] {
		return 200 'Hello from NGINX "/greet" location REGEX MATCH INSENSITIVE';
	 }

	 #EXACT MATCH
         location = /greet {
                return 200 'Hello from NGINX "/greet" location Exact Match';
         }
	
	 #PREFERENTIAL PREFIX MATCH TOP PRIORITY
	 location ^~ /Greet2 {
		return 200 'Hello fron NGINX "/greet" location Exact Match';
	 }

	 # testing image dynamic module
	 location = /thumb.png {
		image_filter rotate 180;
	 }
	}
}
