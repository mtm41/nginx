user www-data;

# Change process pid number
# pid /var/run/new_nginx.pid;

# one worker for each CPU core
worker_processes auto;

load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

events {
	# number of request each worker can handle = $ ulimit -n
	worker_connections 1024;
}

http {

	include mime.types;

	# Define limit zone
	limit_req_zone $request_uri zone=MYZONE:10m rate=1r/s;

	# Configure microcache (fastcgi) levels mark means distribution levels of caching in a tree structure
	fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
	fastcgi_cache_key "$scheme$request_method$host$request_uri";	
	add_header X-Cache $upstream_cache_status;	

	#enabling compression for server responses
	gzip on;
	# most cases is enough with lvl 3 or 4
	gzip_comp_level 3;
	gzip_types text/css; 
	gzip_types text/javascript;

	# Buffer size for POST submissions
	client_body_buffer_size 10K;
	client_max_body_size 8m;

	# Buffer size for Headers
	client_header_buffer_size 1k;

	# Max time to receive client headers/body
	# too long
	client_body_timeout 12; 
	client_header_timeout 12;

	# Max time to keep a connection open for
	# couple of seconds better
	keepalive_timeout 15;

	# Max time for the client accept/receive a response
	send_timeout 10;

	# Skip buffering for static files, write at the same time
	# important increase of performace increase
	sendfile on;

	# Optimise sendfile packets
	# same important increase
	tcp_nopush on;

	# Redirect all traffic to HTTPS for allowing insecure connections (http)
	server {
	 
	 listen 80 default_server;
	 server_name 192.168.56.101;
	 return 301 https://192.168.56.101$request_uri;
	
	}

	server {

	 # openssl req -x509 -days 10 -nodes -newkey rsa:2048 -keyout /etc/nginx/ssl/self.key -out /etc/nginx/ssl/self.crt
	 listen 443 ssl http2;
	 server_name 192.168.56.101;
	 
	 ssl_certificate /etc/nginx/ssl/self.crt;
	 ssl_certificate_key /etc/nginx/ssl/self.key;
	 
	 # Disable SSL
	 ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

	 # Optimise cipher suits
	 ssl_prefer_server_ciphers on;
	 ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

	 # Enable DH Params
	 # openssl dhparam 2048 -out /etc/nginx/ssl/dhparam.pem
	 ssl_dhparam /etc/nginx/ssl/dhparam.pem;

	 # Enable HSTS for avoiding man-in-the-middle attacks
	 add_header Strict-Transport-Security "max-age=31536000" always;

	 # SSL sessions for caching handshake to encrrp/desencrypt
	 ssl_session_cache shared:SSL:40m;
	 ssl_session_timeout 4h;
	 ssl_session_tickets on;

	 root /home/manuel/sites/demo;

	 index index.php index.html;

	 # Cache by default
         set $no_cache 0;

         # Check for cache bypass
         if ($arg_skipcache = 1) {
                set $no_cache 1;
         }

	 location = /index.html {
		http2_push /style.css;
		http2_push /thumb.png;
	 }
	
	 location = /style.css {
		# Slowing down connections with burst
		limit_req zone=MYZONE burst=5 nodelay;
		try_files $uri $uri/ =404;
	 }

	 location = /admin {
		auth_basic "Secure Area";
		auth_basic_user_file /etc/nginx/.htpasswd;
	 }

	 location ~\.php$ {
	 	#Pass php request to the php-fpm service (fastcgi)
		include fastcgi.conf;
		fastcgi_pass unix:/run/php/php7.1-fpm.sock;

		# Enable cache
		fastcgi_cache ZONE_1;
		fastcgi_cache_valid 200 404 60m;
		fastcgi_cache_bypass $no_cache;
		fastcgi_no_cache $no_cache;
	 }
	 set $weekend 'No';

	 # Check if weekend
	 if ( $date_local ~ 'Saturday|Sunday' ){
		set $weekend 'Yes';
	 }

	 # Intercept all requests and serves first if is available
	 try_files $uri index.html /friendly_404;

	 location /friendly_404 {
		access_log off;
		return 404 "Sorry, that file could not be found.";
	 }

	 rewrite ^/user/(\w+) /catch/$1;
	 
	 location /catch {
		return 200 "hello user";
	 }

	 # Chech statis API key
#	 if ( $arg_apikey != 1234 ) {
#		return 401 "Incorrect API key";
#	 }
	
	 location /logo {
		return 307 /thumb.png;
	 }

	 location /inspect {
		return 200 "$weekend";
		#return 200 "Name: $arg_Name";
		# return 200 "$host\n$uri\n$args";
	 }

	 #PREFIX MATCH
	 location /greet {
		return 200 'Hello fron NGINX "/greet" location PREFIX MATCH';
	 }
	
	 #REGEX MATCH SENSITIVE
	 location ~ /greet[0-9] {
		return 200 'Hello from NGINX "/greet" location REGEX MATCH SENSITIVE';
	 }

	 #REGEX MATCH INSENSITIVE
	 location ~* /greet[0-9] {
		return 200 'Hello from NGINX "/greet" location REGEX MATCH INSENSITIVE';
	 }

	 #EXACT MATCH
         location = /greet {
                return 200 'Hello from NGINX "/greet" location Exact Match';
         }
	
	 #PREFERENTIAL PREFIX MATCH TOP PRIORITY
	 location ^~ /Greet2 {
		return 200 'Hello fron NGINX "/greet" location Exact Match';
	 }

	 # testing image dynamic module
	 location = /thumb.png {
		image_filter rotate 180;
	 }

	 # Allowing client browsers caching resources
	 location ~* \.(css|js|jpg|png)$ {
		access_log off;
		add_header Cache-Control public;
                add_header Pragma public;
                add_header Vary Accept-Encoding;
                expires 1M;
 	 }
	}
}
